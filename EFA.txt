rm(list=ls())

library(polycor)
library(psych)
library(CDM)

##################
#   Q-matrix   ###
##################

q = data.ecpe$q.matrix   ### q matrix
q = as.matrix(q)

######################
###   Data   #########
######################

Y = as.matrix(data.ecpe$dat)
Y = Y[,-1]
colnames(Y) = NULL
#Y   ### DATA


#########################################
###   Tetrachoric correlations   ########
#########################################

het.mat <- hetcor(Y)$cor   ### tetra correlation from psych package


#######################
###    EFA    #########
#######################
#fact = factanal(Y, ncol(q))$loadings[1:nrow(q),]

fac = factanal(factors = ncol(q), covmat = het.mat)$loadings[1:nrow(q),]


colnames(fac) = NULL
ld <- fac
ld = promax(ld, m=4)
ld <- ld$loadings
ld = abs(ld[1:nrow(q),])   


#######################
###   set a=0.4   #####
#######################

normalized = function(x){(x)/(max(x))}
normalized = t(as.matrix(apply(ld, 1, normalized)))
h =as.matrix(ifelse(normalized>0.4, 1, 0)) #### max's a half
final_matrix2 = h

##########################
### Reorder   ############
##########################

permutations <- function(n){
    if(n==1){
      return(matrix(1))
    } else {
      sp <- permutations(n-1)
      p <- nrow(sp)
      A <- matrix(nrow=n*p,ncol=n)
      for(i in 1:n){
        A[(i-1)*p+1:p,] <- cbind(i,sp+(sp>=i))
      }
      return(A)
    }
}

reorder <- function(J=nrow(q), K=ncol(q), a, b){
    vec.a = matrix(a, ncol=1) #as.vector(a)  # starting p matrix : p.ls
    vec.b = matrix(b, ncol=1) #as.vector(b)  # matrix of p
    pm = permutations(K) ## 5x4x3x2x1 = 120
    tpm =t(pm)
    vec.b.matrix = matrix(as.vector(b[,c(tpm[,1:factorial(K)])]), J*K, factorial(K))
    vec.bind.ab = as.matrix(cbind(vec.a, vec.b.matrix))
    dist.matrix = as.matrix(dist(t(vec.bind.ab), method="euclidean"))
    ds = dist.matrix[,1]
    min.value = (min(ds[ds>0]))
    matrix.number = as.numeric(which(ds == min.value))
    reorder.b = matrix(vec.b.matrix[, matrix.number-1], J, K)    ## result of reordered matrix  
    output = list(reorder.b=reorder.b)
    output$reorder.b ###################
}

final_Q = reorder(J=nrow(q), K=ncol(q),a=q, b=final_matrix2)


final_Q



